mdl 1.5;

import ::tex::*;

import ::anno::author;
import ::anno::copyright_notice;
import ::anno::description;
import ::anno::display_name;
import ::anno::in_group;
import ::anno::key_words;
import ::anno::unused;
import ::anno::usage;
import ::base::file_texture;
import ::base::mono_mode;
import ::base::texture_coordinate_info;
import ::base::texture_return;
import ::df::diffuse_edf;
import ::math::dot;
import ::state::normal;
import ::state::texture_coordinate;
import ::state::texture_tangent_u;
import ::state::texture_tangent_v;
import ::tex::gamma_mode;
import ::tex::wrap_mode;

export material GizmoTex(
    uniform texture_2d emission_texture = texture_2d() [[
        ::anno::description("Light Emission Texture"),
        ::anno::display_name("emission_texture"),
        ::anno::in_group("", "", "")
    ]],
    float emission_intensity = 1000.f [[
        ::anno::description("Widget Intensity Scale"),
        ::anno::display_name("emission_intensity"),
        ::anno::in_group("", "", ""),
        ::anno::usage("")
    ]],
    color emission_color = color(1.f, 1.f, 1.f) [[
        ::anno::description("Widget Emission Color"),
        ::anno::display_name("emission_color"),
        ::anno::in_group("", "", "")
    ]]
    )
 = 
    let {
        bool tmp0 = false;
        material_surface tmp1(
            bsdf(),
            material_emission(::df::diffuse_edf(""), ::base::file_texture(emission_texture, color(0.f, 0.f, 0.f), emission_color, ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint * emission_intensity, intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f));
        material_geometry tmp5(
            float3(0.f),
            ::base::file_texture(emission_texture, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono,
            ::state::normal());
        hair_bsdf tmp6 = hair_bsdf();
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5,
            hair: tmp6);

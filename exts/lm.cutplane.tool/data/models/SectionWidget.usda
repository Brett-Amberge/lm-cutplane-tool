#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "Root" (
    kind = "component"
)
{
    def Mesh "edge" (
        prepend apiSchemas = ["ShadowAPI"]
    )
    {
        float3[] extent = [(99999, 99999, 99999), (-99999, -99999, -99999)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </Root/Looks/edgeTex> (
            bindMaterialAs = "strongerThanDescendants"
        )

        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        uniform token orientation = "rightHanded"
        point3f[] points = [(-250, 0, -25), (250, 0, -25), (-250, 0, 25), (250, 0, 25)]
        float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            customData = {
                dictionary Maya = {
                    int UVSetIndex = 0
                }
            }
            interpolation = "vertex"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        bool shadow:enable = 0
        uniform token subdivisionScheme = "none"
        float3 xformOp:rotateZYX = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }

	def Mesh "handle0" (
        prepend apiSchemas = ["ShadowAPI"]
    )
    {
        float3[] extent = [(99999, 99999, 99999), (-99999, -99999, -99999)]

        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </Root/Looks/handleTex> (
            bindMaterialAs = "strongerThanDescendants"
        )

        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        uniform token orientation = "rightHanded"
        point3f[] points = [(-6, 0,-16), (6, 0,-16), (-6, 0, 16), (6, 0, 16)]
        float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            customData = {
                dictionary Maya = {
                    int UVSetIndex = 0
                }
            }
            interpolation = "vertex"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        bool shadow:enable = 0
        uniform token subdivisionScheme = "none"
        float3 xformOp:rotateZYX = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (260, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }

    def Mesh "handle1" (
        prepend apiSchemas = ["ShadowAPI"]
    )
    {
        float3[] extent = [(99999, 99999, 99999), (-99999, -99999, -99999)]

        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </Root/Looks/handleTex> (
            bindMaterialAs = "strongerThanDescendants"
        )

        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        uniform token orientation = "rightHanded"
        point3f[] points = [(-6, 0,-16), (6, 0, -16), (-6, 0, 16), (6, 0, 16)]
        float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            customData = {
                dictionary Maya = {
                    int UVSetIndex = 0
                }
            }
            interpolation = "vertex"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        bool shadow:enable = 0
        uniform token subdivisionScheme = "none"
        float3 xformOp:rotateZYX = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-260, 0, 0)

        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }

        def Scope "Looks"
    {
        def Material "edgeTex"
        {
            token outputs:displacement.connect = </Root/Looks/edgeTex/Shader.outputs:out>
            token outputs:surface.connect = </Root/Looks/edgeTex/Shader.outputs:out>
            token outputs:volume.connect = </Root/Looks/edgeTex/Shader.outputs:out>

            def Shader "Shader"
            {
                asset inputs:emission_texture = @../icons/SectionLine.png@ (
                            colorSpace = "auto"
                            displayName = "emission_texture"
                        )
                color3f inputs:emission_color = (1, 1, 1)

                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:sourceAsset = @../materials/GizmoTex.mdl@
                uniform token info:sourceAsset:subIdentifier = "GizmoTex"
                token outputs:out
            }
        }

        def Material "handleTex"
        {
            token outputs:displacement.connect = </Root/Looks/handleTex/Shader.outputs:out>
            token outputs:surface.connect = </Root/Looks/handleTex/Shader.outputs:out>
            token outputs:volume.connect = </Root/Looks/handleTex/Shader.outputs:out>

            def Shader "Shader"
            {
                asset inputs:emission_texture = @../icons/SectionHandle.png@ (
                            colorSpace = "auto"
                            displayName = "emission_texture"
                        )

                color3f inputs:emission_color = (1, 1, 1)

                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:sourceAsset = @../materials/GizmoTex.mdl@
                uniform token info:sourceAsset:subIdentifier = "GizmoTex"
                token outputs:out
            }
        }

    }
}

